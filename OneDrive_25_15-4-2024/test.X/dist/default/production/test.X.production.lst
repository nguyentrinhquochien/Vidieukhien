

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jun 02 12:13:56 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207                           
   208                           	psect	idataCOMMON
   209  00E1                     __pidataCOMMON:
   210                           
   211                           ;initializer for _state
   212  00E1  3401               	retlw	1
   213  00E2  3400               	retlw	0
   214  0008                     _PORTD	set	8
   215  0007                     _PORTC	set	7
   216  0031                     _RB1	set	49
   217  0058                     _RBIF	set	88
   218  0030                     _RB0	set	48
   219  005B                     _RBIE	set	91
   220  005F                     _GIE	set	95
   221  0096                     _IOCB	set	150
   222  0095                     _WPUB	set	149
   223  0086                     _TRISB	set	134
   224  0087                     _TRISC	set	135
   225  0088                     _TRISD	set	136
   226  040F                     _nRBPU	set	1039
   227  0189                     _ANSELH	set	393
   228  0188                     _ANSEL	set	392
   229                           
   230                           	psect	cinit
   231  000F                     start_initialization:	
   232                           ; #config settings
   233                           
   234  000F                     __initialization:
   235                           
   236                           ; Initialize objects allocated to COMMON
   237  000F  120A  118A  20E1  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   238  0014  00F8               	movwf	__pdataCOMMON& (0+127)
   239  0015  120A  118A  20E2  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   240  001A  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   241  001B                     end_of_initialization:	
   242                           ;End of C runtime variable initialization code
   243                           
   244  001B                     __end_of__initialization:
   245  001B  0183               	clrf	3
   246  001C  120A  118A  2873   	ljmp	_main	;jump to C main() function
   247                           
   248                           	psect	dataCOMMON
   249  0078                     __pdataCOMMON:
   250  0078                     _state:
   251  0078                     	ds	2
   252                           
   253                           	psect	cstackCOMMON
   254  0070                     __pcstackCOMMON:
   255  0070                     ?_declarePort:
   256  0070                     ?_main:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_myIsr:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ??_myIsr:	
   263                           ; 1 bytes @ 0x0
   264                           
   265                           
   266                           ; 1 bytes @ 0x0
   267  0070                     	ds	4
   268  0074                     ??_declarePort:
   269  0074                     ?_sangDanInAndOut:	
   270                           ; 1 bytes @ 0x4
   271                           
   272  0074                     sangDanInAndOut@n:	
   273                           ; 2 bytes @ 0x4
   274                           
   275                           
   276                           ; 2 bytes @ 0x4
   277  0074                     	ds	2
   278  0076                     ??_sangDanInAndOut:
   279                           
   280                           ; 1 bytes @ 0x6
   281  0076                     	ds	2
   282                           
   283                           	psect	cstackBANK0
   284  0020                     __pcstackBANK0:
   285  0020                     sangDanInAndOut@index:
   286                           
   287                           ; 1 bytes @ 0x0
   288  0020                     	ds	1
   289  0021                     sangDanInAndOut@holdC:
   290                           
   291                           ; 1 bytes @ 0x1
   292  0021                     	ds	1
   293  0022                     sangDanInAndOut@holdD:
   294                           
   295                           ; 1 bytes @ 0x2
   296  0022                     	ds	1
   297  0023                     ??_main:
   298                           
   299                           ; 1 bytes @ 0x3
   300  0023                     	ds	2
   301                           
   302                           	psect	maintext
   303  0073                     __pmaintext:	
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 67 in file "test.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;		None
   314 ;; Return value:  Size  Location     Type
   315 ;;                  1    wreg      void 
   316 ;; Registers used:
   317 ;;		wreg, status,2, status,0, pclath, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : B00/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   323 ;;      Params:         0       0       0       0       0
   324 ;;      Locals:         0       0       0       0       0
   325 ;;      Temps:          0       2       0       0       0
   326 ;;      Totals:         0       2       0       0       0
   327 ;;Total ram usage:        2 bytes
   328 ;; Hardware stack levels required when called: 2
   329 ;; This function calls:
   330 ;;		_declarePort
   331 ;;		_sangDanInAndOut
   332 ;; This function is called by:
   333 ;;		Startup code after reset
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337                           
   338                           ;psect for function _main
   339  0073                     _main:
   340  0073                     l784:	
   341                           ;incstack = 0
   342                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   343                           
   344                           
   345                           ;test.c: 69:     declarePort();
   346  0073  120A  118A  20CA  120A  118A  	fcall	_declarePort
   347  0078                     l786:
   348                           
   349                           ;test.c: 70:     if(!RB0) {
   350  0078  1283               	bcf	3,5	;RP0=0, select bank0
   351  0079  1303               	bcf	3,6	;RP1=0, select bank0
   352  007A  1806               	btfsc	6,0	;volatile
   353  007B  287D               	goto	u161
   354  007C  287E               	goto	u160
   355  007D                     u161:
   356  007D  28A4               	goto	l60
   357  007E                     u160:
   358  007E                     l788:
   359                           
   360                           ;test.c: 71:         _delay((unsigned long)((50)*(4000000/4000.0)));
   361  007E  3041               	movlw	65
   362  007F  1283               	bcf	3,5	;RP0=0, select bank0
   363  0080  1303               	bcf	3,6	;RP1=0, select bank0
   364  0081  00A4               	movwf	??_main+1
   365  0082  30ED               	movlw	237
   366  0083  00A3               	movwf	??_main
   367  0084                     u197:
   368  0084  0BA3               	decfsz	??_main,f
   369  0085  2884               	goto	u197
   370  0086  0BA4               	decfsz	??_main+1,f
   371  0087  2884               	goto	u197
   372  0088  2889               	nop2
   373  0089                     l53:	
   374                           ;test.c: 72:         while(!RB0);
   375                           
   376  0089  1283               	bcf	3,5	;RP0=0, select bank0
   377  008A  1303               	bcf	3,6	;RP1=0, select bank0
   378  008B  1C06               	btfss	6,0	;volatile
   379  008C  288E               	goto	u171
   380  008D  288F               	goto	u170
   381  008E                     u171:
   382  008E  2889               	goto	l53
   383  008F                     u170:
   384  008F                     l790:
   385                           
   386                           ;test.c: 74:             if(!state) {
   387  008F  0878               	movf	_state,w
   388  0090  0479               	iorwf	_state+1,w
   389  0091  1D03               	btfss	3,2
   390  0092  2894               	goto	u181
   391  0093  2895               	goto	u180
   392  0094                     u181:
   393  0094  289A               	goto	l794
   394  0095                     u180:
   395  0095                     l792:
   396                           
   397                           ;test.c: 75:                 PORTC = 0;
   398  0095  1283               	bcf	3,5	;RP0=0, select bank0
   399  0096  1303               	bcf	3,6	;RP1=0, select bank0
   400  0097  0187               	clrf	7	;volatile
   401                           
   402                           ;test.c: 76:                 PORTD = 0;
   403  0098  0188               	clrf	8	;volatile
   404                           
   405                           ;test.c: 77:                 break;
   406  0099  28A4               	goto	l60
   407  009A                     l794:
   408                           
   409                           ;test.c: 79:             sangDanInAndOut(1);
   410  009A  3001               	movlw	1
   411  009B  00F4               	movwf	sangDanInAndOut@n
   412  009C  3000               	movlw	0
   413  009D  00F5               	movwf	sangDanInAndOut@n+1
   414  009E  120A  118A  201F  120A  118A  	fcall	_sangDanInAndOut
   415  00A3  288F               	goto	l790
   416  00A4                     l60:
   417  00A4  120A  118A  280C   	ljmp	start
   418  00A7                     __end_of_main:
   419                           
   420                           	psect	text1
   421  001F                     __ptext1:	
   422 ;; *************** function _sangDanInAndOut *****************
   423 ;; Defined at:
   424 ;;		line 40 in file "test.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;  n               2    4[COMMON] unsigned int 
   427 ;; Auto vars:     Size  Location     Type
   428 ;;  holdD           1    2[BANK0 ] unsigned char 
   429 ;;  holdC           1    1[BANK0 ] unsigned char 
   430 ;;  index           1    0[BANK0 ] unsigned char 
   431 ;; Return value:  Size  Location     Type
   432 ;;                  2    4[COMMON] int 
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   440 ;;      Params:         2       0       0       0       0
   441 ;;      Locals:         0       3       0       0       0
   442 ;;      Temps:          2       0       0       0       0
   443 ;;      Totals:         4       3       0       0       0
   444 ;;Total ram usage:        7 bytes
   445 ;; Hardware stack levels used: 1
   446 ;; Hardware stack levels required when called: 1
   447 ;; This function calls:
   448 ;;		Nothing
   449 ;; This function is called by:
   450 ;;		_main
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           
   455                           ;psect for function _sangDanInAndOut
   456  001F                     _sangDanInAndOut:
   457  001F                     l736:	
   458                           ;incstack = 0
   459                           ; Regs used in _sangDanInAndOut: [wreg+status,2+status,0]
   460                           
   461                           
   462                           ;test.c: 41:     while(n > 0) {
   463  001F  286C               	goto	l770
   464  0020                     l738:
   465                           
   466                           ;test.c: 43:         unsigned char index = 0;
   467  0020  1283               	bcf	3,5	;RP0=0, select bank0
   468  0021  1303               	bcf	3,6	;RP1=0, select bank0
   469  0022  01A0               	clrf	sangDanInAndOut@index
   470  0023                     l740:
   471                           
   472                           ;test.c: 44:         unsigned char holdC = 0x80;
   473  0023  3080               	movlw	128
   474  0024  00F6               	movwf	??_sangDanInAndOut
   475  0025  0876               	movf	??_sangDanInAndOut,w
   476  0026  00A1               	movwf	sangDanInAndOut@holdC
   477  0027                     l742:
   478                           
   479                           ;test.c: 45:         unsigned char holdD = 0x01;
   480  0027  01A2               	clrf	sangDanInAndOut@holdD
   481  0028  0AA2               	incf	sangDanInAndOut@holdD,f
   482  0029                     l744:
   483                           
   484                           ;test.c: 46:         PORTC = 0;
   485  0029  0187               	clrf	7	;volatile
   486  002A                     l746:
   487                           
   488                           ;test.c: 47:         PORTD = 0;
   489  002A  0188               	clrf	8	;volatile
   490  002B                     l748:
   491                           
   492                           ;test.c: 48:         _delay((unsigned long)((30)*(4000000/4000.0)));
   493  002B  3027               	movlw	39
   494  002C  00F7               	movwf	??_sangDanInAndOut+1
   495  002D  30F5               	movlw	245
   496  002E  00F6               	movwf	??_sangDanInAndOut
   497  002F                     u207:
   498  002F  0BF6               	decfsz	??_sangDanInAndOut,f
   499  0030  282F               	goto	u207
   500  0031  0BF7               	decfsz	??_sangDanInAndOut+1,f
   501  0032  282F               	goto	u207
   502                           
   503                           ;test.c: 49:         while(index < 8) {
   504  0033  285E               	goto	l764
   505  0034                     l750:
   506                           
   507                           ;test.c: 50:             if(!state) {
   508  0034  0878               	movf	_state,w
   509  0035  0479               	iorwf	_state+1,w
   510  0036  1D03               	btfss	3,2
   511  0037  2839               	goto	u101
   512  0038  283A               	goto	u100
   513  0039                     u101:
   514  0039  283D               	goto	l756
   515  003A                     u100:
   516  003A                     l752:
   517                           
   518                           ;test.c: 51:                 PORTC = 0;
   519  003A  0187               	clrf	7	;volatile
   520                           
   521                           ;test.c: 52:                 PORTD = 0;
   522  003B  0188               	clrf	8	;volatile
   523  003C  2872               	goto	l45
   524  003D                     l756:
   525                           
   526                           ;test.c: 55:             PORTC = holdC;
   527  003D  0821               	movf	sangDanInAndOut@holdC,w
   528  003E  0087               	movwf	7	;volatile
   529                           
   530                           ;test.c: 56:             PORTD = holdD;
   531  003F  0822               	movf	sangDanInAndOut@holdD,w
   532  0040  0088               	movwf	8	;volatile
   533                           
   534                           ;test.c: 57:             _delay((unsigned long)((30)*(4000000/4000.0)));
   535  0041  3027               	movlw	39
   536  0042  00F7               	movwf	??_sangDanInAndOut+1
   537  0043  30F5               	movlw	245
   538  0044  00F6               	movwf	??_sangDanInAndOut
   539  0045                     u217:
   540  0045  0BF6               	decfsz	??_sangDanInAndOut,f
   541  0046  2845               	goto	u217
   542  0047  0BF7               	decfsz	??_sangDanInAndOut+1,f
   543  0048  2845               	goto	u217
   544  0049                     l758:
   545                           
   546                           ;test.c: 58:             holdC = (holdC >> 1) | holdC;
   547  0049  1283               	bcf	3,5	;RP0=0, select bank0
   548  004A  1303               	bcf	3,6	;RP1=0, select bank0
   549  004B  0821               	movf	sangDanInAndOut@holdC,w
   550  004C  00F6               	movwf	??_sangDanInAndOut
   551  004D  1003               	clrc
   552  004E  0C76               	rrf	??_sangDanInAndOut,w
   553  004F  0421               	iorwf	sangDanInAndOut@holdC,w
   554  0050  00F7               	movwf	??_sangDanInAndOut+1
   555  0051  0877               	movf	??_sangDanInAndOut+1,w
   556  0052  00A1               	movwf	sangDanInAndOut@holdC
   557  0053                     l760:
   558                           
   559                           ;test.c: 59:             holdD = (holdD << 1) | holdD;
   560  0053  0822               	movf	sangDanInAndOut@holdD,w
   561  0054  00F6               	movwf	??_sangDanInAndOut
   562  0055  0776               	addwf	??_sangDanInAndOut,w
   563  0056  0422               	iorwf	sangDanInAndOut@holdD,w
   564  0057  00F7               	movwf	??_sangDanInAndOut+1
   565  0058  0877               	movf	??_sangDanInAndOut+1,w
   566  0059  00A2               	movwf	sangDanInAndOut@holdD
   567  005A                     l762:
   568                           
   569                           ;test.c: 60:             index++;
   570  005A  3001               	movlw	1
   571  005B  00F6               	movwf	??_sangDanInAndOut
   572  005C  0876               	movf	??_sangDanInAndOut,w
   573  005D  07A0               	addwf	sangDanInAndOut@index,f
   574  005E                     l764:
   575                           
   576                           ;test.c: 49:         while(index < 8) {
   577  005E  3008               	movlw	8
   578  005F  1283               	bcf	3,5	;RP0=0, select bank0
   579  0060  1303               	bcf	3,6	;RP1=0, select bank0
   580  0061  0220               	subwf	sangDanInAndOut@index,w
   581  0062  1C03               	skipc
   582  0063  2865               	goto	u111
   583  0064  2866               	goto	u110
   584  0065                     u111:
   585  0065  2834               	goto	l750
   586  0066                     u110:
   587  0066                     l766:
   588  0066                     l768:
   589                           
   590                           ;test.c: 64:         n--;
   591  0066  3001               	movlw	1
   592  0067  02F4               	subwf	sangDanInAndOut@n,f
   593  0068  3000               	movlw	0
   594  0069  1C03               	skipc
   595  006A  03F5               	decf	sangDanInAndOut@n+1,f
   596  006B  02F5               	subwf	sangDanInAndOut@n+1,f
   597  006C                     l770:
   598                           
   599                           ;test.c: 41:     while(n > 0) {
   600  006C  0874               	movf	sangDanInAndOut@n,w
   601  006D  0475               	iorwf	sangDanInAndOut@n+1,w
   602  006E  1D03               	btfss	3,2
   603  006F  2871               	goto	u121
   604  0070  2872               	goto	u120
   605  0071                     u121:
   606  0071  2820               	goto	l738
   607  0072                     u120:
   608  0072                     l45:
   609  0072  0008               	return
   610  0073                     __end_of_sangDanInAndOut:
   611                           
   612                           	psect	text2
   613  00CA                     __ptext2:	
   614 ;; *************** function _declarePort *****************
   615 ;; Defined at:
   616 ;;		line 26 in file "test.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, status,2
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   630 ;;      Params:         0       0       0       0       0
   631 ;;      Locals:         0       0       0       0       0
   632 ;;      Temps:          0       0       0       0       0
   633 ;;      Totals:         0       0       0       0       0
   634 ;;Total ram usage:        0 bytes
   635 ;; Hardware stack levels used: 1
   636 ;; Hardware stack levels required when called: 1
   637 ;; This function calls:
   638 ;;		Nothing
   639 ;; This function is called by:
   640 ;;		_main
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           
   645                           ;psect for function _declarePort
   646  00CA                     _declarePort:
   647  00CA                     l662:	
   648                           ;incstack = 0
   649                           ; Regs used in _declarePort: [wreg+status,2]
   650                           
   651                           
   652                           ;test.c: 27:     ANSEL = ANSELH = 0;
   653  00CA  1683               	bsf	3,5	;RP0=1, select bank3
   654  00CB  1703               	bsf	3,6	;RP1=1, select bank3
   655  00CC  0189               	clrf	9	;volatile
   656  00CD  0188               	clrf	8	;volatile
   657                           
   658                           ;test.c: 28:     TRISD = 0;
   659  00CE  1683               	bsf	3,5	;RP0=1, select bank1
   660  00CF  1303               	bcf	3,6	;RP1=0, select bank1
   661  00D0  0188               	clrf	8	;volatile
   662                           
   663                           ;test.c: 29:     TRISC = 0;
   664  00D1  0187               	clrf	7	;volatile
   665  00D2                     l664:
   666                           
   667                           ;test.c: 30:     TRISB = WPUB = 0x03;
   668  00D2  3003               	movlw	3
   669  00D3  0095               	movwf	21	;volatile
   670  00D4  0086               	movwf	6	;volatile
   671  00D5                     l666:
   672                           
   673                           ;test.c: 31:     PORTC = 0;
   674  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   675  00D6  1303               	bcf	3,6	;RP1=0, select bank0
   676  00D7  0187               	clrf	7	;volatile
   677  00D8                     l668:
   678                           
   679                           ;test.c: 32:     PORTD = 0;
   680  00D8  0188               	clrf	8	;volatile
   681  00D9                     l670:
   682                           
   683                           ;test.c: 33:     nRBPU = 0;
   684  00D9  1683               	bsf	3,5	;RP0=1, select bank1
   685  00DA  1303               	bcf	3,6	;RP1=0, select bank1
   686  00DB  1381               	bcf	1,7	;volatile
   687  00DC                     l672:
   688                           
   689                           ;test.c: 34:     GIE = 1;
   690  00DC  178B               	bsf	11,7	;volatile
   691  00DD                     l674:
   692                           
   693                           ;test.c: 36:     RBIE = 1;
   694  00DD  158B               	bsf	11,3	;volatile
   695  00DE                     l676:
   696                           
   697                           ;test.c: 37:     IOCB = 0x03;
   698  00DE  3003               	movlw	3
   699  00DF  0096               	movwf	22	;volatile
   700  00E0                     l35:
   701  00E0  0008               	return
   702  00E1                     __end_of_declarePort:
   703                           
   704                           	psect	text3
   705  00A7                     __ptext3:	
   706 ;; *************** function _myIsr *****************
   707 ;; Defined at:
   708 ;;		line 83 in file "test.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;		None
   711 ;; Auto vars:     Size  Location     Type
   712 ;;		None
   713 ;; Return value:  Size  Location     Type
   714 ;;                  1    wreg      void 
   715 ;; Registers used:
   716 ;;		wreg, status,2
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   722 ;;      Params:         0       0       0       0       0
   723 ;;      Locals:         0       0       0       0       0
   724 ;;      Temps:          4       0       0       0       0
   725 ;;      Totals:         4       0       0       0       0
   726 ;;Total ram usage:        4 bytes
   727 ;; Hardware stack levels used: 1
   728 ;; This function calls:
   729 ;;		Nothing
   730 ;; This function is called by:
   731 ;;		Interrupt level 1
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           
   736                           ;psect for function _myIsr
   737  00A7                     _myIsr:
   738  00A7                     i1l726:
   739                           
   740                           ;test.c: 84:     if(RBIF) {
   741  00A7  1C0B               	btfss	11,0	;volatile
   742  00A8  28AA               	goto	u7_21
   743  00A9  28AB               	goto	u7_20
   744  00AA                     u7_21:
   745  00AA  28C3               	goto	i1l70
   746  00AB                     u7_20:
   747  00AB                     i1l728:
   748                           
   749                           ;test.c: 85:         if(!RB1) {
   750  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   751  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   752  00AD  1886               	btfsc	6,1	;volatile
   753  00AE  28B0               	goto	u8_21
   754  00AF  28B1               	goto	u8_20
   755  00B0                     u8_21:
   756  00B0  28C2               	goto	i1l734
   757  00B1                     u8_20:
   758  00B1                     i1l730:
   759                           
   760                           ;test.c: 86:             _delay((unsigned long)((50)*(4000000/4000.0)));
   761  00B1  3041               	movlw	65
   762  00B2  00F1               	movwf	??_myIsr+1
   763  00B3  30EE               	movlw	238
   764  00B4  00F0               	movwf	??_myIsr
   765  00B5                     u22_27:
   766  00B5  0BF0               	decfsz	??_myIsr,f
   767  00B6  28B5               	goto	u22_27
   768  00B7  0BF1               	decfsz	??_myIsr+1,f
   769  00B8  28B5               	goto	u22_27
   770  00B9  0000               	nop
   771  00BA                     i1l67:	
   772                           ;test.c: 87:             while(!RB1);
   773                           
   774  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   775  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   776  00BC  1C86               	btfss	6,1	;volatile
   777  00BD  28BF               	goto	u9_21
   778  00BE  28C0               	goto	u9_20
   779  00BF                     u9_21:
   780  00BF  28BA               	goto	i1l67
   781  00C0                     u9_20:
   782  00C0                     i1l732:
   783                           
   784                           ;test.c: 88:             state = 0;
   785  00C0  01F8               	clrf	_state
   786  00C1  01F9               	clrf	_state+1
   787  00C2                     i1l734:
   788                           
   789                           ;test.c: 90:         RBIF = 0;
   790  00C2  100B               	bcf	11,0	;volatile
   791  00C3                     i1l70:
   792  00C3  0873               	movf	??_myIsr+3,w
   793  00C4  008A               	movwf	10
   794  00C5  0E72               	swapf	??_myIsr+2,w
   795  00C6  0083               	movwf	3
   796  00C7  0EFE               	swapf	btemp,f
   797  00C8  0E7E               	swapf	btemp,w
   798  00C9  0009               	retfie
   799  00CA                     __end_of_myIsr:
   800  007E                     btemp	set	126	;btemp
   801  007E                     wtemp0	set	126
   802                           
   803                           	psect	intentry
   804  0004                     __pintentry:	
   805                           ;incstack = 0
   806                           ; Regs used in _myIsr: [wreg+status,2]
   807                           
   808  0004                     interrupt_function:
   809  007E                     saved_w	set	btemp
   810  0004  00FE               	movwf	btemp
   811  0005  0E03               	swapf	3,w
   812  0006  00F2               	movwf	??_myIsr+2
   813  0007  080A               	movf	10,w
   814  0008  00F3               	movwf	??_myIsr+3
   815  0009  120A  118A  28A7   	ljmp	_myIsr
   816                           
   817                           	psect	config
   818                           
   819                           ;Config register CONFIG1 @ 0x2007
   820                           ;	Oscillator Selection bits
   821                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   822                           ;	Watchdog Timer Enable bit
   823                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   824                           ;	Power-up Timer Enable bit
   825                           ;	PWRTE = OFF, PWRT disabled
   826                           ;	RE3/MCLR pin function select bit
   827                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
   828                           ;	Code Protection bit
   829                           ;	CP = OFF, Program memory code protection is disabled
   830                           ;	Data Code Protection bit
   831                           ;	CPD = OFF, Data memory code protection is disabled
   832                           ;	Brown Out Reset Selection bits
   833                           ;	BOREN = OFF, BOR disabled
   834                           ;	Internal External Switchover bit
   835                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   836                           ;	Fail-Safe Clock Monitor Enabled bit
   837                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   838                           ;	Low Voltage Programming Enable bit
   839                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   840                           ;	In-Circuit Debugger Mode bit
   841                           ;	DEBUG = 0x1, unprogrammed default
   842  2007                     	org	8199
   843  2007  20F2               	dw	8434
   844                           
   845                           ;Config register CONFIG2 @ 0x2008
   846                           ;	Brown-out Reset Selection bit
   847                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   848                           ;	Flash Program Memory Self Write Enable bits
   849                           ;	WRT = OFF, Write protection off
   850  2008                     	org	8200
   851  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      5       5
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_sangDanInAndOut

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sangDanInAndOut

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myIsr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     261
                                              3 BANK0      2     2      0
                        _declarePort
                    _sangDanInAndOut
 ---------------------------------------------------------------------------------
 (1) _sangDanInAndOut                                      7     5      2     261
                                              4 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _declarePort                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _myIsr                                                4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _declarePort
   _sangDanInAndOut

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      5       5       5        6.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       F      12        0.0%
ABS                  0      0       F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jun 02 12:13:56 2021

                      l35 00E0                        l60 00A4                        l45 0072  
                      l53 0089                       l740 0023                       l670 00D9  
                     l662 00CA                       l750 0034                       l742 0027  
                     l672 00DC                       l664 00D2                       l760 0053  
                     l752 003A                       l744 0029                       l736 001F  
                     l674 00DD                       l666 00D5                       l762 005A  
                     l746 002A                       l738 0020                       l770 006C  
                     l676 00DE                       l668 00D8                       l756 003D  
                     l764 005E                       l748 002B                       l766 0066  
                     l758 0049                       l790 008F                       l768 0066  
                     l792 0095                       l784 0073                       l794 009A  
                     l786 0078                       l788 007E                       _GIE 005F  
                     _RB0 0030                       _RB1 0031                       u100 003A  
                     u101 0039                       u110 0066                       u111 0065  
                     u120 0072                       u121 0071                       u207 002F  
                     u160 007E                       u217 0045                       u161 007D  
                     u170 008F                       u171 008E                       u180 0095  
                     u181 0094                       u197 0084                      _IOCB 0096  
                    _RBIE 005B                      _RBIF 0058                      i1l70 00C3  
                    i1l67 00BA                      _WPUB 0095                      u7_20 00AB  
                    u7_21 00AA                      u8_20 00B1                      u8_21 00B0  
                    u9_20 00C0                      u9_21 00BF                      _main 0073  
                    btemp 007E                      start 000C          sangDanInAndOut@n 0074  
__size_of_sangDanInAndOut 0054                     ?_main 0070                     _ANSEL 0188  
                   i1l730 00B1                     i1l732 00C0                     i1l734 00C2  
                   i1l726 00A7                     i1l728 00AB                     u22_27 00B5  
                   _PORTC 0007                     _PORTD 0008                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     _nRBPU 040F  
    __size_of_declarePort 0017                     _myIsr 00A7                     _state 0078  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __initialization 000F              __end_of_main 00A7                    ??_main 0023  
                  ?_myIsr 0070                    _ANSELH 0189              __pdataCOMMON 0078  
                  saved_w 007E         ??_sangDanInAndOut 0076   __end_of__initialization 001B  
          __pcstackCOMMON 0070             __end_of_myIsr 00CA                   ??_myIsr 0070  
              __pmaintext 0073                __pintentry 0004                   __ptext1 001F  
                 __ptext2 00CA                   __ptext3 00A7             ??_declarePort 0074  
    end_of_initialization 001B           _sangDanInAndOut 001F       __end_of_declarePort 00E1  
           __pidataCOMMON 00E1       start_initialization 000F   __end_of_sangDanInAndOut 0073  
             _declarePort 00CA                 ___latbits 0002             __pcstackBANK0 0020  
          __size_of_myIsr 0023         interrupt_function 0004          ?_sangDanInAndOut 0074  
           __size_of_main 0034              ?_declarePort 0070                  intlevel1 0000  
    sangDanInAndOut@holdC 0021      sangDanInAndOut@holdD 0022      sangDanInAndOut@index 0020  
