

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jun 02 11:50:12 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207                           
   208                           	psect	idataCOMMON
   209  00E0                     __pidataCOMMON:
   210                           
   211                           ;initializer for _state
   212  00E0  3401               	retlw	1
   213  00E1  3400               	retlw	0
   214  0008                     _PORTD	set	8
   215  0007                     _PORTC	set	7
   216  0031                     _RB1	set	49
   217  0058                     _RBIF	set	88
   218  0030                     _RB0	set	48
   219  005B                     _RBIE	set	91
   220  005F                     _GIE	set	95
   221  0096                     _IOCB	set	150
   222  0095                     _WPUB	set	149
   223  0086                     _TRISB	set	134
   224  0087                     _TRISC	set	135
   225  0088                     _TRISD	set	136
   226  040F                     _nRBPU	set	1039
   227  0188                     _ANSEL	set	392
   228                           
   229                           	psect	cinit
   230  000F                     start_initialization:	
   231                           ; #config settings
   232                           
   233  000F                     __initialization:
   234                           
   235                           ; Initialize objects allocated to COMMON
   236  000F  120A  118A  20E0  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   237  0014  00F8               	movwf	__pdataCOMMON& (0+127)
   238  0015  120A  118A  20E1  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   239  001A  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   240  001B                     end_of_initialization:	
   241                           ;End of C runtime variable initialization code
   242                           
   243  001B                     __end_of__initialization:
   244  001B  0183               	clrf	3
   245  001C  120A  118A  2872   	ljmp	_main	;jump to C main() function
   246                           
   247                           	psect	dataCOMMON
   248  0078                     __pdataCOMMON:
   249  0078                     _state:
   250  0078                     	ds	2
   251                           
   252                           	psect	cstackCOMMON
   253  0070                     __pcstackCOMMON:
   254  0070                     ?_declarePort:
   255  0070                     ?_main:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_myIsr:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ??_myIsr:	
   262                           ; 1 bytes @ 0x0
   263                           
   264                           
   265                           ; 1 bytes @ 0x0
   266  0070                     	ds	4
   267  0074                     ??_declarePort:
   268  0074                     ?_sangDanInAndOut:	
   269                           ; 1 bytes @ 0x4
   270                           
   271  0074                     sangDanInAndOut@n:	
   272                           ; 2 bytes @ 0x4
   273                           
   274                           
   275                           ; 2 bytes @ 0x4
   276  0074                     	ds	2
   277  0076                     ??_sangDanInAndOut:
   278                           
   279                           ; 1 bytes @ 0x6
   280  0076                     	ds	2
   281                           
   282                           	psect	cstackBANK0
   283  0020                     __pcstackBANK0:
   284  0020                     sangDanInAndOut@index:
   285                           
   286                           ; 1 bytes @ 0x0
   287  0020                     	ds	1
   288  0021                     sangDanInAndOut@holdC:
   289                           
   290                           ; 1 bytes @ 0x1
   291  0021                     	ds	1
   292  0022                     sangDanInAndOut@holdD:
   293                           
   294                           ; 1 bytes @ 0x2
   295  0022                     	ds	1
   296  0023                     ??_main:
   297                           
   298                           ; 1 bytes @ 0x3
   299  0023                     	ds	2
   300                           
   301                           	psect	maintext
   302  0072                     __pmaintext:	
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   305 ;;
   306 ;; *************** function _main *****************
   307 ;; Defined at:
   308 ;;		line 67 in file "tieuluan1.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0, pclath, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : B00/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   322 ;;      Params:         0       0       0       0       0
   323 ;;      Locals:         0       0       0       0       0
   324 ;;      Temps:          0       2       0       0       0
   325 ;;      Totals:         0       2       0       0       0
   326 ;;Total ram usage:        2 bytes
   327 ;; Hardware stack levels required when called: 2
   328 ;; This function calls:
   329 ;;		_declarePort
   330 ;;		_sangDanInAndOut
   331 ;; This function is called by:
   332 ;;		Startup code after reset
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336                           
   337                           ;psect for function _main
   338  0072                     _main:
   339  0072                     l782:	
   340                           ;incstack = 0
   341                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   342                           
   343                           
   344                           ;tieuluan1.c: 69:     declarePort();
   345  0072  120A  118A  20C9  120A  118A  	fcall	_declarePort
   346  0077                     l784:
   347                           
   348                           ;tieuluan1.c: 70:     if(!RB0) {
   349  0077  1283               	bcf	3,5	;RP0=0, select bank0
   350  0078  1303               	bcf	3,6	;RP1=0, select bank0
   351  0079  1806               	btfsc	6,0	;volatile
   352  007A  287C               	goto	u161
   353  007B  287D               	goto	u160
   354  007C                     u161:
   355  007C  28A3               	goto	l58
   356  007D                     u160:
   357  007D                     l786:
   358                           
   359                           ;tieuluan1.c: 71:         _delay((unsigned long)((50)*(4000000/4000.0)));
   360  007D  3041               	movlw	65
   361  007E  1283               	bcf	3,5	;RP0=0, select bank0
   362  007F  1303               	bcf	3,6	;RP1=0, select bank0
   363  0080  00A4               	movwf	??_main+1
   364  0081  30ED               	movlw	237
   365  0082  00A3               	movwf	??_main
   366  0083                     u197:
   367  0083  0BA3               	decfsz	??_main,f
   368  0084  2883               	goto	u197
   369  0085  0BA4               	decfsz	??_main+1,f
   370  0086  2883               	goto	u197
   371  0087  2888               	nop2
   372  0088                     l51:	
   373                           ;tieuluan1.c: 72:         while(!RB0);
   374                           
   375  0088  1283               	bcf	3,5	;RP0=0, select bank0
   376  0089  1303               	bcf	3,6	;RP1=0, select bank0
   377  008A  1C06               	btfss	6,0	;volatile
   378  008B  288D               	goto	u171
   379  008C  288E               	goto	u170
   380  008D                     u171:
   381  008D  2888               	goto	l51
   382  008E                     u170:
   383  008E                     l788:
   384                           
   385                           ;tieuluan1.c: 74:             if(!state) {
   386  008E  0878               	movf	_state,w
   387  008F  0479               	iorwf	_state+1,w
   388  0090  1D03               	btfss	3,2
   389  0091  2893               	goto	u181
   390  0092  2894               	goto	u180
   391  0093                     u181:
   392  0093  2899               	goto	l792
   393  0094                     u180:
   394  0094                     l790:
   395                           
   396                           ;tieuluan1.c: 75:                 PORTC = 0;
   397  0094  1283               	bcf	3,5	;RP0=0, select bank0
   398  0095  1303               	bcf	3,6	;RP1=0, select bank0
   399  0096  0187               	clrf	7	;volatile
   400                           
   401                           ;tieuluan1.c: 76:                 PORTD = 0;
   402  0097  0188               	clrf	8	;volatile
   403                           
   404                           ;tieuluan1.c: 77:                 break;
   405  0098  28A3               	goto	l58
   406  0099                     l792:
   407                           
   408                           ;tieuluan1.c: 79:             sangDanInAndOut(1);
   409  0099  3001               	movlw	1
   410  009A  00F4               	movwf	sangDanInAndOut@n
   411  009B  3000               	movlw	0
   412  009C  00F5               	movwf	sangDanInAndOut@n+1
   413  009D  120A  118A  201F  120A  118A  	fcall	_sangDanInAndOut
   414  00A2  288E               	goto	l788
   415  00A3                     l58:
   416  00A3  120A  118A  280C   	ljmp	start
   417  00A6                     __end_of_main:
   418                           
   419                           	psect	text1
   420  001F                     __ptext1:	
   421 ;; *************** function _sangDanInAndOut *****************
   422 ;; Defined at:
   423 ;;		line 40 in file "tieuluan1.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  n               2    4[COMMON] unsigned int 
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  holdD           1    2[BANK0 ] unsigned char 
   428 ;;  holdC           1    1[BANK0 ] unsigned char 
   429 ;;  index           1    0[BANK0 ] unsigned char 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  2    4[COMMON] int 
   432 ;; Registers used:
   433 ;;		wreg, status,2, status,0
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   439 ;;      Params:         2       0       0       0       0
   440 ;;      Locals:         0       3       0       0       0
   441 ;;      Temps:          2       0       0       0       0
   442 ;;      Totals:         4       3       0       0       0
   443 ;;Total ram usage:        7 bytes
   444 ;; Hardware stack levels used: 1
   445 ;; Hardware stack levels required when called: 1
   446 ;; This function calls:
   447 ;;		Nothing
   448 ;; This function is called by:
   449 ;;		_main
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           
   454                           ;psect for function _sangDanInAndOut
   455  001F                     _sangDanInAndOut:
   456  001F                     l734:	
   457                           ;incstack = 0
   458                           ; Regs used in _sangDanInAndOut: [wreg+status,2+status,0]
   459                           
   460                           
   461                           ;tieuluan1.c: 41:     while(n > 0) {
   462  001F  286B               	goto	l768
   463  0020                     l736:
   464                           
   465                           ;tieuluan1.c: 43:         unsigned char index = 0;
   466  0020  1283               	bcf	3,5	;RP0=0, select bank0
   467  0021  1303               	bcf	3,6	;RP1=0, select bank0
   468  0022  01A0               	clrf	sangDanInAndOut@index
   469  0023                     l738:
   470                           
   471                           ;tieuluan1.c: 44:         unsigned char holdC = 0x80;
   472  0023  3080               	movlw	128
   473  0024  00F6               	movwf	??_sangDanInAndOut
   474  0025  0876               	movf	??_sangDanInAndOut,w
   475  0026  00A1               	movwf	sangDanInAndOut@holdC
   476  0027                     l740:
   477                           
   478                           ;tieuluan1.c: 45:         unsigned char holdD = 0x01;
   479  0027  01A2               	clrf	sangDanInAndOut@holdD
   480  0028  0AA2               	incf	sangDanInAndOut@holdD,f
   481  0029                     l742:
   482                           
   483                           ;tieuluan1.c: 46:         PORTC = 0;
   484  0029  0187               	clrf	7	;volatile
   485  002A                     l744:
   486                           
   487                           ;tieuluan1.c: 47:         PORTD = 0;
   488  002A  0188               	clrf	8	;volatile
   489  002B                     l746:
   490                           
   491                           ;tieuluan1.c: 48:         _delay((unsigned long)((30)*(4000000/4000.0)));
   492  002B  3027               	movlw	39
   493  002C  00F7               	movwf	??_sangDanInAndOut+1
   494  002D  30F5               	movlw	245
   495  002E  00F6               	movwf	??_sangDanInAndOut
   496  002F                     u207:
   497  002F  0BF6               	decfsz	??_sangDanInAndOut,f
   498  0030  282F               	goto	u207
   499  0031  0BF7               	decfsz	??_sangDanInAndOut+1,f
   500  0032  282F               	goto	u207
   501                           
   502                           ;tieuluan1.c: 49:         while(index < 1) {
   503  0033  285E               	goto	l762
   504  0034                     l748:
   505                           
   506                           ;tieuluan1.c: 50:             if(!state) {
   507  0034  0878               	movf	_state,w
   508  0035  0479               	iorwf	_state+1,w
   509  0036  1D03               	btfss	3,2
   510  0037  2839               	goto	u101
   511  0038  283A               	goto	u100
   512  0039                     u101:
   513  0039  283D               	goto	l754
   514  003A                     u100:
   515  003A                     l750:
   516                           
   517                           ;tieuluan1.c: 51:                 PORTC = 0;
   518  003A  0187               	clrf	7	;volatile
   519                           
   520                           ;tieuluan1.c: 52:                 PORTD = 0;
   521  003B  0188               	clrf	8	;volatile
   522  003C  2871               	goto	l43
   523  003D                     l754:
   524                           
   525                           ;tieuluan1.c: 55:             PORTC = holdC;
   526  003D  0821               	movf	sangDanInAndOut@holdC,w
   527  003E  0087               	movwf	7	;volatile
   528                           
   529                           ;tieuluan1.c: 56:             PORTD = holdD;
   530  003F  0822               	movf	sangDanInAndOut@holdD,w
   531  0040  0088               	movwf	8	;volatile
   532                           
   533                           ;tieuluan1.c: 57:             _delay((unsigned long)((30)*(4000000/4000.0)));
   534  0041  3027               	movlw	39
   535  0042  00F7               	movwf	??_sangDanInAndOut+1
   536  0043  30F5               	movlw	245
   537  0044  00F6               	movwf	??_sangDanInAndOut
   538  0045                     u217:
   539  0045  0BF6               	decfsz	??_sangDanInAndOut,f
   540  0046  2845               	goto	u217
   541  0047  0BF7               	decfsz	??_sangDanInAndOut+1,f
   542  0048  2845               	goto	u217
   543  0049                     l756:
   544                           
   545                           ;tieuluan1.c: 58:             holdC = (holdC >> 1) | holdC;
   546  0049  1283               	bcf	3,5	;RP0=0, select bank0
   547  004A  1303               	bcf	3,6	;RP1=0, select bank0
   548  004B  0821               	movf	sangDanInAndOut@holdC,w
   549  004C  00F6               	movwf	??_sangDanInAndOut
   550  004D  1003               	clrc
   551  004E  0C76               	rrf	??_sangDanInAndOut,w
   552  004F  0421               	iorwf	sangDanInAndOut@holdC,w
   553  0050  00F7               	movwf	??_sangDanInAndOut+1
   554  0051  0877               	movf	??_sangDanInAndOut+1,w
   555  0052  00A1               	movwf	sangDanInAndOut@holdC
   556  0053                     l758:
   557                           
   558                           ;tieuluan1.c: 59:             holdD = (holdD << 1) | holdD;
   559  0053  0822               	movf	sangDanInAndOut@holdD,w
   560  0054  00F6               	movwf	??_sangDanInAndOut
   561  0055  0776               	addwf	??_sangDanInAndOut,w
   562  0056  0422               	iorwf	sangDanInAndOut@holdD,w
   563  0057  00F7               	movwf	??_sangDanInAndOut+1
   564  0058  0877               	movf	??_sangDanInAndOut+1,w
   565  0059  00A2               	movwf	sangDanInAndOut@holdD
   566  005A                     l760:
   567                           
   568                           ;tieuluan1.c: 60:             index++;
   569  005A  3001               	movlw	1
   570  005B  00F6               	movwf	??_sangDanInAndOut
   571  005C  0876               	movf	??_sangDanInAndOut,w
   572  005D  07A0               	addwf	sangDanInAndOut@index,f
   573  005E                     l762:
   574                           
   575                           ;tieuluan1.c: 49:         while(index < 1) {
   576  005E  1283               	bcf	3,5	;RP0=0, select bank0
   577  005F  1303               	bcf	3,6	;RP1=0, select bank0
   578  0060  0820               	movf	sangDanInAndOut@index,w
   579  0061  1903               	btfsc	3,2
   580  0062  2864               	goto	u111
   581  0063  2865               	goto	u110
   582  0064                     u111:
   583  0064  2834               	goto	l748
   584  0065                     u110:
   585  0065                     l764:
   586  0065                     l766:
   587                           
   588                           ;tieuluan1.c: 64:         n--;
   589  0065  3001               	movlw	1
   590  0066  02F4               	subwf	sangDanInAndOut@n,f
   591  0067  3000               	movlw	0
   592  0068  1C03               	skipc
   593  0069  03F5               	decf	sangDanInAndOut@n+1,f
   594  006A  02F5               	subwf	sangDanInAndOut@n+1,f
   595  006B                     l768:
   596                           
   597                           ;tieuluan1.c: 41:     while(n > 0) {
   598  006B  0874               	movf	sangDanInAndOut@n,w
   599  006C  0475               	iorwf	sangDanInAndOut@n+1,w
   600  006D  1D03               	btfss	3,2
   601  006E  2870               	goto	u121
   602  006F  2871               	goto	u120
   603  0070                     u121:
   604  0070  2820               	goto	l736
   605  0071                     u120:
   606  0071                     l43:
   607  0071  0008               	return
   608  0072                     __end_of_sangDanInAndOut:
   609                           
   610                           	psect	text2
   611  00C9                     __ptext2:	
   612 ;; *************** function _declarePort *****************
   613 ;; Defined at:
   614 ;;		line 26 in file "tieuluan1.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;		None
   617 ;; Auto vars:     Size  Location     Type
   618 ;;		None
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, status,2
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   628 ;;      Params:         0       0       0       0       0
   629 ;;      Locals:         0       0       0       0       0
   630 ;;      Temps:          0       0       0       0       0
   631 ;;      Totals:         0       0       0       0       0
   632 ;;Total ram usage:        0 bytes
   633 ;; Hardware stack levels used: 1
   634 ;; Hardware stack levels required when called: 1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           
   643                           ;psect for function _declarePort
   644  00C9                     _declarePort:
   645  00C9                     l660:	
   646                           ;incstack = 0
   647                           ; Regs used in _declarePort: [wreg+status,2]
   648                           
   649                           
   650                           ;tieuluan1.c: 27:     ANSEL = ANSEL = 0;
   651  00C9  1683               	bsf	3,5	;RP0=1, select bank3
   652  00CA  1703               	bsf	3,6	;RP1=1, select bank3
   653  00CB  0188               	clrf	8	;volatile
   654  00CC  0188               	clrf	8	;volatile
   655                           
   656                           ;tieuluan1.c: 28:     TRISD = 0;
   657  00CD  1683               	bsf	3,5	;RP0=1, select bank1
   658  00CE  1303               	bcf	3,6	;RP1=0, select bank1
   659  00CF  0188               	clrf	8	;volatile
   660                           
   661                           ;tieuluan1.c: 29:     TRISC = 0;
   662  00D0  0187               	clrf	7	;volatile
   663  00D1                     l662:
   664                           
   665                           ;tieuluan1.c: 30:     TRISB = WPUB = 0x03;
   666  00D1  3003               	movlw	3
   667  00D2  0095               	movwf	21	;volatile
   668  00D3  0086               	movwf	6	;volatile
   669  00D4                     l664:
   670                           
   671                           ;tieuluan1.c: 31:     PORTC = 0;
   672  00D4  1283               	bcf	3,5	;RP0=0, select bank0
   673  00D5  1303               	bcf	3,6	;RP1=0, select bank0
   674  00D6  0187               	clrf	7	;volatile
   675  00D7                     l666:
   676                           
   677                           ;tieuluan1.c: 32:     PORTD = 0;
   678  00D7  0188               	clrf	8	;volatile
   679  00D8                     l668:
   680                           
   681                           ;tieuluan1.c: 33:     nRBPU = 0;
   682  00D8  1683               	bsf	3,5	;RP0=1, select bank1
   683  00D9  1303               	bcf	3,6	;RP1=0, select bank1
   684  00DA  1381               	bcf	1,7	;volatile
   685  00DB                     l670:
   686                           
   687                           ;tieuluan1.c: 34:     GIE = 1;
   688  00DB  178B               	bsf	11,7	;volatile
   689  00DC                     l672:
   690                           
   691                           ;tieuluan1.c: 36:     RBIE = 1;
   692  00DC  158B               	bsf	11,3	;volatile
   693  00DD                     l674:
   694                           
   695                           ;tieuluan1.c: 37:     IOCB = 0x03;
   696  00DD  3003               	movlw	3
   697  00DE  0096               	movwf	22	;volatile
   698  00DF                     l33:
   699  00DF  0008               	return
   700  00E0                     __end_of_declarePort:
   701                           
   702                           	psect	text3
   703  00A6                     __ptext3:	
   704 ;; *************** function _myIsr *****************
   705 ;; Defined at:
   706 ;;		line 83 in file "tieuluan1.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;		None
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   720 ;;      Params:         0       0       0       0       0
   721 ;;      Locals:         0       0       0       0       0
   722 ;;      Temps:          4       0       0       0       0
   723 ;;      Totals:         4       0       0       0       0
   724 ;;Total ram usage:        4 bytes
   725 ;; Hardware stack levels used: 1
   726 ;; This function calls:
   727 ;;		Nothing
   728 ;; This function is called by:
   729 ;;		Interrupt level 1
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           
   734                           ;psect for function _myIsr
   735  00A6                     _myIsr:
   736  00A6                     i1l724:
   737                           
   738                           ;tieuluan1.c: 84:     if(RBIF) {
   739  00A6  1C0B               	btfss	11,0	;volatile
   740  00A7  28A9               	goto	u7_21
   741  00A8  28AA               	goto	u7_20
   742  00A9                     u7_21:
   743  00A9  28C2               	goto	i1l68
   744  00AA                     u7_20:
   745  00AA                     i1l726:
   746                           
   747                           ;tieuluan1.c: 85:         if(!RB1) {
   748  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   749  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   750  00AC  1886               	btfsc	6,1	;volatile
   751  00AD  28AF               	goto	u8_21
   752  00AE  28B0               	goto	u8_20
   753  00AF                     u8_21:
   754  00AF  28C1               	goto	i1l732
   755  00B0                     u8_20:
   756  00B0                     i1l728:
   757                           
   758                           ;tieuluan1.c: 86:             _delay((unsigned long)((50)*(4000000/4000.0)));
   759  00B0  3041               	movlw	65
   760  00B1  00F1               	movwf	??_myIsr+1
   761  00B2  30EE               	movlw	238
   762  00B3  00F0               	movwf	??_myIsr
   763  00B4                     u22_27:
   764  00B4  0BF0               	decfsz	??_myIsr,f
   765  00B5  28B4               	goto	u22_27
   766  00B6  0BF1               	decfsz	??_myIsr+1,f
   767  00B7  28B4               	goto	u22_27
   768  00B8  0000               	nop
   769  00B9                     i1l65:	
   770                           ;tieuluan1.c: 87:             while(!RB1);
   771                           
   772  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   773  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   774  00BB  1C86               	btfss	6,1	;volatile
   775  00BC  28BE               	goto	u9_21
   776  00BD  28BF               	goto	u9_20
   777  00BE                     u9_21:
   778  00BE  28B9               	goto	i1l65
   779  00BF                     u9_20:
   780  00BF                     i1l730:
   781                           
   782                           ;tieuluan1.c: 88:             state = 0;
   783  00BF  01F8               	clrf	_state
   784  00C0  01F9               	clrf	_state+1
   785  00C1                     i1l732:
   786                           
   787                           ;tieuluan1.c: 90:         RBIF = 0;
   788  00C1  100B               	bcf	11,0	;volatile
   789  00C2                     i1l68:
   790  00C2  0873               	movf	??_myIsr+3,w
   791  00C3  008A               	movwf	10
   792  00C4  0E72               	swapf	??_myIsr+2,w
   793  00C5  0083               	movwf	3
   794  00C6  0EFE               	swapf	btemp,f
   795  00C7  0E7E               	swapf	btemp,w
   796  00C8  0009               	retfie
   797  00C9                     __end_of_myIsr:
   798  007E                     btemp	set	126	;btemp
   799  007E                     wtemp0	set	126
   800                           
   801                           	psect	intentry
   802  0004                     __pintentry:	
   803                           ;incstack = 0
   804                           ; Regs used in _myIsr: [wreg+status,2]
   805                           
   806  0004                     interrupt_function:
   807  007E                     saved_w	set	btemp
   808  0004  00FE               	movwf	btemp
   809  0005  0E03               	swapf	3,w
   810  0006  00F2               	movwf	??_myIsr+2
   811  0007  080A               	movf	10,w
   812  0008  00F3               	movwf	??_myIsr+3
   813  0009  120A  118A  28A6   	ljmp	_myIsr
   814                           
   815                           	psect	config
   816                           
   817                           ;Config register CONFIG1 @ 0x2007
   818                           ;	Oscillator Selection bits
   819                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   820                           ;	Watchdog Timer Enable bit
   821                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   822                           ;	Power-up Timer Enable bit
   823                           ;	PWRTE = OFF, PWRT disabled
   824                           ;	RE3/MCLR pin function select bit
   825                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
   826                           ;	Code Protection bit
   827                           ;	CP = OFF, Program memory code protection is disabled
   828                           ;	Data Code Protection bit
   829                           ;	CPD = OFF, Data memory code protection is disabled
   830                           ;	Brown Out Reset Selection bits
   831                           ;	BOREN = OFF, BOR disabled
   832                           ;	Internal External Switchover bit
   833                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   834                           ;	Fail-Safe Clock Monitor Enabled bit
   835                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   836                           ;	Low Voltage Programming Enable bit
   837                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   838                           ;	In-Circuit Debugger Mode bit
   839                           ;	DEBUG = 0x1, unprogrammed default
   840  2007                     	org	8199
   841  2007  20F2               	dw	8434
   842                           
   843                           ;Config register CONFIG2 @ 0x2008
   844                           ;	Brown-out Reset Selection bit
   845                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   846                           ;	Flash Program Memory Self Write Enable bits
   847                           ;	WRT = OFF, Write protection off
   848  2008                     	org	8200
   849  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      5       5
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_sangDanInAndOut

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sangDanInAndOut

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myIsr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     261
                                              3 BANK0      2     2      0
                        _declarePort
                    _sangDanInAndOut
 ---------------------------------------------------------------------------------
 (1) _sangDanInAndOut                                      7     5      2     261
                                              4 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _declarePort                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _myIsr                                                4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _declarePort
   _sangDanInAndOut

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      5       5       5        6.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       F      12        0.0%
ABS                  0      0       F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jun 02 11:50:12 2021

                      l33 00DF                        l43 0071                        l51 0088  
                      l58 00A3                       l660 00C9                       l740 0027  
                     l670 00DB                       l662 00D1                       l750 003A  
                     l742 0029                       l734 001F                       l672 00DC  
                     l664 00D4                       l760 005A                       l744 002A  
                     l736 0020                       l674 00DD                       l666 00D7  
                     l754 003D                       l762 005E                       l746 002B  
                     l738 0023                       l668 00D8                       l764 0065  
                     l756 0049                       l748 0034                       l766 0065  
                     l758 0053                       l790 0094                       l782 0072  
                     l768 006B                       l792 0099                       l784 0077  
                     l786 007D                       l788 008E                       _GIE 005F  
                     _RB0 0030                       _RB1 0031                       u100 003A  
                     u101 0039                       u110 0065                       u111 0064  
                     u120 0071                       u121 0070                       u207 002F  
                     u160 007D                       u217 0045                       u161 007C  
                     u170 008E                       u171 008D                       u180 0094  
                     u181 0093                       u197 0083                      _IOCB 0096  
                    _RBIE 005B                      _RBIF 0058                      i1l65 00B9  
                    i1l68 00C2                      _WPUB 0095                      u7_20 00AA  
                    u7_21 00A9                      u8_20 00B0                      u8_21 00AF  
                    u9_20 00BF                      u9_21 00BE                      _main 0072  
                    btemp 007E                      start 000C          sangDanInAndOut@n 0074  
__size_of_sangDanInAndOut 0053                     ?_main 0070                     _ANSEL 0188  
                   i1l730 00BF                     i1l732 00C1                     i1l724 00A6  
                   i1l726 00AA                     i1l728 00B0                     u22_27 00B4  
                   _PORTC 0007                     _PORTD 0008                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     _nRBPU 040F  
    __size_of_declarePort 0017                     _myIsr 00A6                     _state 0078  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __initialization 000F              __end_of_main 00A6                    ??_main 0023  
                  ?_myIsr 0070              __pdataCOMMON 0078                    saved_w 007E  
       ??_sangDanInAndOut 0076   __end_of__initialization 001B            __pcstackCOMMON 0070  
           __end_of_myIsr 00C9                   ??_myIsr 0070                __pmaintext 0072  
              __pintentry 0004                   __ptext1 001F                   __ptext2 00C9  
                 __ptext3 00A6             ??_declarePort 0074      end_of_initialization 001B  
         _sangDanInAndOut 001F       __end_of_declarePort 00E0             __pidataCOMMON 00E0  
     start_initialization 000F   __end_of_sangDanInAndOut 0072               _declarePort 00C9  
               ___latbits 0002             __pcstackBANK0 0020            __size_of_myIsr 0023  
       interrupt_function 0004          ?_sangDanInAndOut 0074             __size_of_main 0034  
            ?_declarePort 0070                  intlevel1 0000      sangDanInAndOut@holdC 0021  
    sangDanInAndOut@holdD 0022      sangDanInAndOut@index 0020  
